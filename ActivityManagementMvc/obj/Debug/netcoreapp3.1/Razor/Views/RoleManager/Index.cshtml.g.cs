#pragma checksum "E:\project\ActivityManagement\ActivityManagementMvc\Views\RoleManager\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d43e1907b41d29f3c971e1276ac6f3721cff1891"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_RoleManager_Index), @"mvc.1.0.view", @"/Views/RoleManager/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\project\ActivityManagement\ActivityManagementMvc\Views\RoleManager\Index.cshtml"
using ActivityManagement.Services.EfInterfaces.Identity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d43e1907b41d29f3c971e1276ac6f3721cff1891", @"/Views/RoleManager/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"afbf2cee9c60c9dae7298ccbd51aca4f3621666b", @"/Views/_ViewImports.cshtml")]
    public class Views_RoleManager_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "E:\project\ActivityManagement\ActivityManagementMvc\Views\RoleManager\Index.cshtml"
  
    ;
    Layout = "_Layout";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""customContainer"">
    <div class=""row"">
        <div class=""card shadow w-100"">
            <div class=""card-header"">
                مدیریت نقش ها
            </div>
            <div class=""card-body"">
                <div id=""RoleGrid"" class=""k-rtl""></div>

            </div>
        </div>
    </div>
</div>
<div id=""windowRoleContainer""></div>
<div id=""context-menu-Container""></div>
<ul id='context-menu'></ul>

<script id=""CreateRole"" type=""text/x-kendo-template"">
    <a onclick=CreateRole() class='k-button k-grid-add'><i class=""fa fa-plus fa-lg""></i><span class=""mr-2"">افزودن</span></a>

</script>

");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
                WriteLiteral("        <script type=\"text/javascript\">\r\n            var recordRole = 0;\r\n            var windowRole;\r\n             \r\n            var accessToDynamicAccess= \'");
#nullable restore
#line 38 "E:\project\ActivityManagement\ActivityManagementMvc\Views\RoleManager\Index.cshtml"
                                   Write(SecurityTrimmingService.CanCurrentUserAccess("", "RoleManager", "DynamicAccess"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' === 'True' ? true: false;
            $(function () {

                //$(""#panelbar"").kendoPanelBar({
                //    expandMode: ""single""
                //});
                debugger;
                var ffff = accessToDynamicAccess;
                RoleInitialize();
                $(""#context-menu"").kendoContextMenu({
                    target: ""#RoleGrid"",
                    filter: ""#context-menu-Container""

                });
            });

            function RoleInitialize() {

                $(""#RoleGrid"").html('');

                $(""#RoleGrid"").kendoGrid({
                    toolbar: [{ template: kendo.template($(""#CreateRole"").html()) }, ""excel""],
                    excel: { allPages: true },
                    //height: 400,
                    columnMenu: true,
                    dataSource: {
                        type: ""aspnetmvc-ajax"",
                        transport: {
                            read: ""/RoleManager/GetRoles"",
        ");
                WriteLiteral(@"                    type: ""POST"",
                            //dataType: ""json"",
                            contentType: ""application/json"",
                            parameterMap: function (data, operation) { return JSON.stringify(data); }
                        },
                        schema: {
                            data: ""Data"",
                            total: ""Total"",
                            errors: ""Errors"",
                            model: {
                                id: ""Id"",
                                fields: {


                                    Id: { type: ""number"", editable: false, nullable: true },
                                    Name: { type: ""string"" },
                                    UsersCount: { type: ""number"" },
                                    Description: { type: ""string"" }


                                }

                            }
                        },
                        parameterMap: function (data, ");
                WriteLiteral(@"operation) {
                            return JSON.stringify(data);

                        },
                        pageSize: 10
                    },


                    serverFiltering: true,
                    serverPaging: true,
                    serverSorting: true,
                    pageable:
                    {
                        pageSizes: [10, 25, 50, 100],
                        refresh: true
                    },
                    sort:
                    {
                        field: ""Id"",
                        dir: ""asc""
                    },
                    dataBinding: function () {
                        recordRole = (this.dataSource.page() - 1) * this.dataSource.pageSize();
                    },

                    selectable: ""single row"",
                    sortable: {
                        mode: ""multiple""
                    },

                    editable: false,
                    filterable: true,
             ");
                WriteLiteral(@"       scrollable: true,
                    columns: [
                        {
                            title: ""ردیف"",
                            template: ""#= ++recordRole #"",
                            width: 50
                        },
                        //{ field: ""Id"", title: ""شناسه نقش"", width: 120 },
                        { field: ""Name"", title: ""نام نقش"", width: 130 },
                        { field: ""UsersCount"", title: ""تعداد کاربران"", width: 130 },
                        { field: ""Description"", title: ""توضیحات"", width: 230 },


                        {
                            title: ""<i class='Add' >عملیات</i>"",
                            width: 80,
                            template: function (e) {

                                return ""<button style='height: 28px;' class='k-button' onclick='RenderMenu(this,"" + e.Id + "")' title='عملیات'><i class='fa fa-cogs fa-1x' ></i>  </button>"";

                            }

                        }
      ");
                WriteLiteral(@"              ]
                }).find(""table"").addClass(""table table-bordered table-hover"");
            }


            function RenderMenu(element, id) {

                var contextMenu = $(""#context-menu"").data(""kendoContextMenu"");
                var dataSourceMenu = [];

                dataSourceMenu.push({
                    text: ""<li onClick='EditRole("" + id + "")' title='ویرایش' type='button'><i class='fa fa-edit fa-lg'></i>ویرایش</li> "",
                    encoded: false
                },
                    {
                        text: ""<li onClick='DeleteRole("" + id + "")' title='حذف' type='button'><i class='fa fa-trash fa-lg'></i>حذف</li> "",
                        encoded: false
                    },
                    {
                        text: ""<li onClick='DetailRole("" + id + "")' title='جزئیات' type='button'><i class='fa fa-list fa-lg'></i>جزئیات</li> "",
                        encoded: false
                    }

                   
                   ");
                WriteLiteral(@"
                );
                if (accessToDynamicAccess === true) {
                    dataSourceMenu.push({
                        text: ""<li onClick='DynamicAccess("" +
                            id +
                            "")' title='سطح دسترسی' type='button'><i class='fa fa-retweet fa-lg'></i>سطح دسترسی</li> "",
                        encoded: false
                    });
                }
                var offset = $(element).offset();

                $(""#context-menu"").data(""kendoContextMenu"").setOptions({
                    dataSource: dataSourceMenu
                });

                contextMenu.open(offset.left + 80, offset.top);
                $(""li"").css(""text-align"", ""right"");
            }

            function CreateRole() {

                $(""#windowRole"").remove();
                $(""#windowRoleContainer"").append(""<div id='windowRole'></div>"");


                $.ajax({
                    type: ""Get"",
                    url: '/RoleManager/Re");
                WriteLiteral(@"nderCreate/',
                    success: function (data) {
                        $(""#windowRole"").html(data);

                        windowRole = $(""#windowRole"").kendoWindow({
                            visible: true,
                            modal: true,
                            width: ""800""
                        });
                        windowRole.data(""kendoWindow"").title('ایجاد').center().open();
                    },
                });
            }

            function EditRole(id) {
                $(""#windowRole"").remove();
                $(""#windowRoleContainer"").append(""<div id='windowRole'></div>"");


                $.ajax({
                    type: ""Get"",
                    url: '/RoleManager/RenderEdit/' + id,
                    success: function (data) {
                        $(""#windowRole"").html(data);

                        windowRole = $(""#windowRole"").kendoWindow({
                            visible: true,
                          ");
                WriteLiteral(@"  modal: true,
                            width: ""800""
                        });
                        windowRole.data(""kendoWindow"").title('ویرایش').center().open();
                    },
                });
            }

            function DeleteRole(id) {
                $(""#windowRole"").remove();
                $(""#windowRoleContainer"").append(""<div id='windowRole'></div>"");
                $.ajax({
                    type: ""Get"",
                    url: '/RoleManager/RenderDelete/' + id,
                    success: function (data) {
                        $(""#windowRole"").html(data);

                        windowRole = $(""#windowRole"").kendoWindow({
                            visible: true,
                            modal: true,
                            width: ""800""
                        });
                        windowRole.data(""kendoWindow"").title('حذف').center().open();
                    },
                });
            }

            function D");
                WriteLiteral(@"etailRole(id) {
                $(""#windowRole"").remove();
                $(""#windowRoleContainer"").append(""<div id='windowRole'></div>"");
                $.ajax({
                    type: ""Get"",
                    url: '/RoleManager/RenderDetail/' + id,
                    success: function (data) {
                        debugger;
                        $(""#windowRole"").html(data);

                        windowRole = $(""#windowRole"").kendoWindow({
                            visible: true,
                            modal: true,
                            width: ""800""
                        });
                        windowRole.data(""kendoWindow"").title('جزئیات').center().open();
                    },
                });
            }
            function DynamicAccess(id) {
                $(""#windowRole"").remove();
                $(""#windowRoleContainer"").append(""<div id='windowRole'></div>"");
                $.ajax({
                    type: ""Get"",
                  ");
                WriteLiteral(@"  url: '/RoleManager/DynamicAccess/' + id,
                    success: function (data) {

                        $(""#windowRole"").html(data);

                        windowRole = $(""#windowRole"").kendoWindow({
                            visible: true,
                            modal: true,
                            width: ""800""
                        });
                        windowRole.data(""kendoWindow"").title('سطح دسترسی').center().open();
                    },
                });
            }
            function RoleGridRefresh() {
                var grid = $(""#RoleGrid"").data(""kendoGrid"");
                grid.dataSource.read();
                try { windowRole.data('kendoWindow').close(); } catch (e) { }
            }
        </script>
");
            }
            );
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public ISecurityTrimmingService SecurityTrimmingService { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
